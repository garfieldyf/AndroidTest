<?xml version="1.0" encoding="UTF-8"?>
<project name="funshion" basedir="." default="compile-all">
    <!-- properties -->
    <property environment="env" />
    <property name="author" value="yuanfeng" />
    <property name="version" value="2.4.3" />
    <property name="ndk.dir" value="com/funshion" />
    <property name="java.package" value="com.funshion" />
    <property name="out.file.name" value="${ant.project.name}.jar" />
    <property name="source.file.name" value="${ant.project.name}-sources.jar" />

    <property name="src.dir" value="${basedir}/src" />
    <property name="out.dir" value="${basedir}/out" />
    <property name="class.dir" value="${basedir}/classes" />
    <property name="source.dir" value="${basedir}/../app/src/main" />

    <property name="api.level" value="22" />
    <property name="sdk.version" value="5.1.1" />
    <property name="sdk.dir" value="${env.ANDROID_HOME}" />
    <property name="libs.jar.dir" value="E:\Include\java" />
    <property name="zxing.jar.path" value="${libs.jar.dir}/zxing/zxing.jar" />
    <property name="android.jar.path" value="${sdk.dir}/platforms/android-${api.level}/android.jar" />
    <property name="android.stubs.jar.path" value="${libs.jar.dir}/android/android-sdk-stubs.jar" />
    <property name="recyclerview.v7.jar.path" value="${libs.jar.dir}/recyclerview/recyclerview-v7.jar" />
    <property name="support.v4.jar.path" value="${sdk.dir}/extras/android/support/v7/appcompat/libs/android-support-v4.jar" />

    <condition property="compile.barcode">
        <istrue value="${compile_barcode}" />
    </condition>

    <!-- target -copy -->
    <target name="-copy">
        <!-- copy the java files -->
        <copy todir="${src.dir}/${ndk.dir}" overwrite="true">
            <fileset dir="${source.dir}/java/android/ext">
                <exclude name="**/temp/**" />
            </fileset>
        </copy>

        <!-- copy the android support v7 files -->
        <!-- 
        <copy todir="${src.dir}/android/support/v7" overwrite="true">
            <fileset dir="${source.dir}/java/android/support/v7" />
        </copy>
        -->

        <!-- replace the package name -->
        <replace dir="${src.dir}" includes="**/*.java" encoding="UTF-8">
            <replacefilter token="@author Garfield" value="@author ${author}" />
            <replacefilter token="android.ext" value="${java.package}" />
        </replace>
    </target>

    <!-- target -remove-barcode-if -->
    <target name="-remove-barcode-if" unless="compile.barcode">
        <echo level="info">Remove barcode source files...</echo>
        <delete dir="${src.dir}/${ndk.dir}/barcode" />
        <delete file="${src.dir}/${ndk.dir}/widget/BarcodeDecorView.java" />
        <delete file="${src.dir}/${ndk.dir}/widget/BarcodeCameraView.java" />
    </target>

    <!-- target -set-debug-mode -->
    <target name="-set-debug-mode">
        <property name="ndk.target" value="debug" />
        <property name="out.file.dir" value="${out.dir}/debug" />
        <echo level="info">Build the ${out.file.name} in DEBUG mode.</echo>
    </target>

    <!-- target -set-release-mode -->
    <target name="-set-release-mode">
        <property name="ndk.target" value="release" />
        <property name="out.file.dir" value="${out.dir}/release" />
        <echo level="info">Build the ${out.file.name} in RELEASE mode.</echo>

        <!-- delete call the __checkXXX methods -->
        <echo level="info">Delete __checkXXX() methods.</echo>
        <replaceregexp match="(.*)__check(.*);" replace="" flags="g" byline="true" >
            <fileset dir="${src.dir}" includes="**/*.java" />
        </replaceregexp>

        <!-- replace call writeUncaughtException() to storeUncaughtException() method -->
        <echo level="info">Replace writeUncaughtException() to storeUncaughtException() in the ProcessUtils.java</echo>
        <replace file="${src.dir}/${ndk.dir}/util/ProcessUtils.java" token="this.writeUncaughtException" value="this.storeUncaughtException" encoding="UTF-8" />
    </target>

    <!-- target -compile-jar -->
    <target name="-compile-jar">
        <!-- compile java files -->
        <mkdir dir="${class.dir}" />
        <javac srcdir="${src.dir}" destdir="${class.dir}" debug="true" source="1.8" target="1.8" includeAntRuntime="false" includeJavaRuntime="false"
            classpath="${android.stubs.jar.path};${android.jar.path};${support.v4.jar.path};${recyclerview.v7.jar.path};${zxing.jar.path}" />

        <!-- build jar file -->
        <jar destfile="${out.file.dir}/${out.file.name}" basedir="${class.dir}">
            <manifest>
                <attribute name="Built-By" value="${author}" />
                <attribute name="Version" value="${version}" />
                <attribute name="SDK-Version" value="Android ${sdk.version} (API ${api.level})" />
            </manifest>
        </jar>

        <!-- build source jar file -->
        <jar destfile="${out.file.dir}/${source.file.name}" basedir="${src.dir}">
            <manifest>
                <attribute name="Built-By" value="${author}" />
                <attribute name="Version" value="${version}" />
                <attribute name="SDK-Version" value="Android ${sdk.version} (API ${api.level})" />
            </manifest>
        </jar>
    </target>

    <!-- target -compile-so -->
    <target name="-compile-so">
        <!-- compile c++ files -->
        <ant antfile="${source.dir}/jni/build.xml" target="${ndk.target}" inheritAll="false" inheritRefs="false" >
            <!-- optional ndk_args NDK_STL=1 -->
            <property name="ndk_args" value="-B all=1 LOCAL_MODULE_NAME=${ant.project.name} PACKAGE_GRAPHICS=${ndk.dir}/graphics/ PACKAGE_UTILITIES=${ndk.dir}/util/" />
        </ant>

        <!-- copy so file -->
        <copy todir="${out.file.dir}" overwrite="true">
            <fileset dir="${source.dir}/jniLibs" includes="**/*.so" />
        </copy>
    </target>

    <!-- +++++++++++++++++++++++++++++++++ optional ant task +++++++++++++++++++++++++++++++++ -->
    <!-- target -obfuscate -->
    <target name="-obfuscate">
        <!-- add proguard tasks -->
        <property name="proguard.dir" value="${sdk.dir}/tools/proguard" />
        <taskdef name="proguard" classname="proguard.ant.ProGuardTask" classpath="${proguard.dir}/lib/proguard.jar" />

        <proguard>
            -include        "${basedir}/../app/proguard.txt"
            -injars         ${out.file.dir}/${out.file.name}
            -outjars        "${out.file.dir}/${out.file.name}"
            -libraryjars    ${android.stubs.jar.path};${android.jar.path};${support.v4.jar.path};${recyclerview.v7.jar.path};${zxing.jar.path}
            -dump           "${out.file.dir}/dump.txt"
            -printseeds     "${out.file.dir}/seeds.txt"
            -printusage     "${out.file.dir}/usage.txt"
            -printmapping   "${out.file.dir}/mapping.txt"
        </proguard>
    </target>

    <!-- target -compile-dex -->
    <target name="-compile-dex">
        <property name="dx.dir" value="${sdk.dir}/build-tools/29.0.0" />
        <property name="dex.file.name" value="${ant.project.name}-dex.jar" />

        <!-- compile dex file -->
        <echo level="info">dx --dex --min-sdk-version=24 --output=${ant.project.name}-dex.jar ${out.file.name}</echo>
        <exec executable="cmd.exe">
            <arg line="/C ${dx.dir}/dx.bat --dex --min-sdk-version=24 --output=${out.file.dir}/${dex.file.name} ${out.file.dir}/${out.file.name}" />
        </exec>
        <echo level="info">Install: ${out.file.dir}/${dex.file.name}</echo>
    </target>
    <!-- +++++++++++++++++++++++++++++++++ optional ant task +++++++++++++++++++++++++++++++++ -->

    <!-- target -post-compile -->
    <target name="-post-compile">
        <copy file="${source.dir}/res/values/attrs_widget.xml" tofile="${out.dir}/attrs_${ant.project.name}_widget.xml" />
        <copy file="${source.dir}/res/values/attrs_barcode_widget.xml" tofile="${out.dir}/attrs_barcode_widget.xml" />
        <copy file="${source.dir}/jni/proguard.txt" tofile="${out.dir}/${ant.project.name}-proguard.txt" />
        <echo level="info">Deletes temp files...</echo>
        <delete includeemptydirs="true">
            <fileset dir="${basedir}">
                <exclude name="*.xml" />
                <exclude name="*.bat" />
                <exclude name="**/out/**" />
            </fileset>
        </delete>

        <echo level="info">Install: ${out.file.dir}/${out.file.name}</echo>
        <echo level="info">Install: ${out.dir}/attrs_barcode_widget.xml</echo>
        <echo level="info">Install: ${out.dir}/attrs_${ant.project.name}_widget.xml</echo>
        <echo level="info">Install: ${out.dir}/${ant.project.name}-proguard.txt</echo>
    </target>

    <!-- target -clean -->
    <target name="-clean">
        <echo level="info">Deletes output files...</echo>
        <delete dir="${out.file.dir}"/>
    </target>

    <!-- target clean -->
    <target name="clean">
        <echo level="info">Deletes output files...</echo>
        <delete dir="${out.dir}"/>
    </target>

    <!-- target compile-so -->
    <target name="compile-so">
        <ant antfile="${source.dir}/jni/build.xml" target="debug" inheritAll="false" inheritRefs="false" />
    </target>

    <!-- target debug -->
    <target name="debug" depends="-clean, -copy, -remove-barcode-if, -set-debug-mode, -compile-jar, -post-compile" />

    <!-- target release -->
    <target name="release" depends="-clean, -copy, -remove-barcode-if, -set-release-mode, -compile-jar, -post-compile" />

    <!-- target compile-debug -->
    <target name="compile-debug" depends="-clean, -copy, -remove-barcode-if, -set-debug-mode, -compile-jar, -compile-so, -post-compile" />

    <!-- target compile-release -->
    <target name="compile-release" depends="-clean, -copy, -remove-barcode-if, -set-release-mode, -compile-jar, -compile-so, -post-compile" />

    <!-- target all -->
    <target name="all">
        <antcall target="debug" />
        <antcall target="release" />
    </target>

    <!-- target compile-all -->
    <target name="compile-all">
        <antcall target="compile-debug" />
        <antcall target="compile-release" />
        <antcall target="compile-so" />
    </target>
</project>
